{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "07c496a3-d3be-489c-9c14-91c503012349",
   "metadata": {},
   "source": [
    "# Assignment to be completed before Thursday 26th Feb 2025, latest 8:00 PM"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a8e2bd7-1d26-4123-b76d-5b55bf807691",
   "metadata": {},
   "source": [
    "## Exercise 1: Library Management System\n",
    "Create a library system where books can be borrowed \n",
    "and returned by students. Use dictionaries to track borrowed books.\n",
    "\n",
    "### Requirements:\n",
    "Define three classes\n",
    "\n",
    "* Book: Represents a book with attributes title, author, and book_id.\n",
    "\n",
    "* Student: Represents a student with attributes name and student_id.\n",
    "\n",
    "* Library: Manages the collection of books and tracks which books are borrowed by which students.\n",
    "\n",
    "### Add methods to:\n",
    "\n",
    "* Borrow a book (check if the book is available).\n",
    "\n",
    "* Return a book.\n",
    "\n",
    "* Display all books borrowed by a student.\n",
    "\n",
    "* Display all available books in the library.\n",
    "\n",
    "Use dictionaries to store relationships between books and students.en books and students. method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0f1c90d6-a49e-49af-9bf8-5377d30b70e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You have successfully borrowed shakeSpear.\n",
      "You have successfully borrowed Between two worlds.\n",
      "Title: shakeSpear, Author: Caeser William, ISBN: 1234, Available Copies: 4\n",
      "Title: Between two worlds, Author: Peter Ndong, ISBN: 4321, Available Copies: 2\n",
      "You have successfully returned shakeSpear.\n",
      "Title: shakeSpear, Author: Caeser William, ISBN: 1234, Available Copies: 5\n",
      "Title: Between two worlds, Author: Peter Ndong, ISBN: 4321, Available Copies: 2\n",
      "{'title': 'Between two worlds', 'author': 'Peter Ndong', 'total_copies': 3, 'available_copies': 2}\n"
     ]
    }
   ],
   "source": [
    "def add_book(title, author, isbn, total_copies):\n",
    "    books[isbn] = {\n",
    "        'title': title,\n",
    "        'author': author,\n",
    "        'total_copies': total_copies,\n",
    "        'available_copies': total_copies\n",
    "  }\n",
    "books ={}\n",
    "borrowed_books = {}\n",
    "users = {}\n",
    "\n",
    "def borrow_book(user_id, isbn):\n",
    "    if isbn not in books:\n",
    "        return \"This book does not exist in the library.\"\n",
    "    if books[isbn]['available_copies'] == 0:\n",
    "        return \"All copies are currently borrowed.\"\n",
    "    \n",
    "    books[isbn]['available_copies'] -= 1\n",
    "    if isbn in borrowed_books:\n",
    "        borrowed_books[isbn] += 1\n",
    "    else:\n",
    "        borrowed_books[isbn] = 1\n",
    "    \n",
    "    if user_id in users:\n",
    "        users[user_id].append(isbn)\n",
    "    else:\n",
    "        users[user_id] = [isbn]\n",
    "    \n",
    "    return f\"You have successfully borrowed {books[isbn]['title']}.\"\n",
    "\n",
    "def return_book(user_id, isbn):\n",
    "    if user_id not in users or isbn not in users[user_id]:\n",
    "        return \"This user did not borrow this book.\"\n",
    "\n",
    "    books[isbn]['available_copies'] += 1\n",
    "    borrowed_books[isbn] -= 1\n",
    "\n",
    "    if borrowed_books[isbn] == 0:\n",
    "        del borrowed_books[isbn]\n",
    "\n",
    "    users[user_id].remove(isbn)\n",
    "    if not users[user_id]:\n",
    "        del users[user_id]\n",
    "    \n",
    "    return f\"You have successfully returned {books[isbn]['title']}.\"\n",
    "\n",
    "def display_books():\n",
    "    for isbn, details in books.items():\n",
    "        print(f\"Title: {details['title']}, Author: {details['author']}, ISBN: {isbn}, Available Copies: {details['available_copies']}\")\n",
    "\n",
    "def search_books(search_by, search_value):\n",
    "    results = []\n",
    "    for isbn, details in books.items():\n",
    "        if search_by == 'title' and search_value.lower() in details['title'].lower():\n",
    "            results.append(details)\n",
    "        elif search_by == 'author' and search_value.lower() in details['author'].lower():\n",
    "            results.append(details)\n",
    "\n",
    "    return results\n",
    "\n",
    "add_book(\"shakeSpear\", \"Caeser William\", \"1234\", 5)\n",
    "add_book(\"Between two worlds\", \"Peter Ndong\", \"4321\", 3)\n",
    "\n",
    "print(borrow_book(\"user1\", \"1234\"))\n",
    "print(borrow_book(\"user2\", \"4321\"))\n",
    "\n",
    "display_books()\n",
    "\n",
    "print(return_book(\"user1\", \"1234\"))\n",
    "\n",
    "display_books()\n",
    "\n",
    "results = search_books(\"author\", \"Ndong\")\n",
    "for book in results:\n",
    "    print(book)\n",
    " \n",
    "\n",
    "   \n",
    "        \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42d385c6-7132-4220-a4e8-bc7fea1f1f3c",
   "metadata": {},
   "source": [
    "## Exercise2: Grade Caculator\n",
    "\n",
    "Create a Student class that stores a student's name, ID, and a list of grades. Implement methods to calculate the average, median, and mode of the grades manually.\n",
    "\n",
    "### Requirements:\n",
    "Define a Student class with attributes: name, student_id, and grades.\n",
    "\n",
    "Add methods to:\n",
    "\n",
    "* Add a grade to the student's list of grades.\n",
    "\n",
    "* Calculate the average grade.\n",
    "\n",
    "* Calculate the median grade.\n",
    "\n",
    "* Calculate the mode grade.\n",
    "\n",
    "* Create a few Student objects and test the methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "78eaf6cd-e161-48da-8c8d-098a527dcf5b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gam, Uba24PH066\n",
      "['A', 'B', 'A', 'C']\n",
      "Average: 3.25\n",
      "Mean: 3.25\n",
      "Median: 3.5\n",
      "Mode: 4\n",
      "Geofrey, Uba24PH067\n",
      "['B', 'C', 'C', 'B']\n",
      "Average: 2.5\n",
      "Mean: 2.5\n",
      "Median: 2.5\n",
      "Mode: 3\n"
     ]
    }
   ],
   "source": [
    "import statistics\n",
    "\n",
    "class Student:\n",
    "    def __init__(self, name, stud_id):\n",
    "        self.name = name\n",
    "        self.stud_id = stud_id\n",
    "        self.grades = []\n",
    "\n",
    "    def displayname(self):\n",
    "        print(f\"{self.name}, {self.stud_id}\")\n",
    "\n",
    "    def addGrade(self, grade):\n",
    "        self.grades.append(grade)\n",
    "\n",
    "    def displayGrades(self):\n",
    "        print(f\"{self.grades}\")\n",
    "\n",
    "    def calculateStatistics(self):\n",
    "        # Convert grades to numerical values for calculation\n",
    "        grade_points = {'A': 4, 'B': 3, 'C': 2, 'D': 1, 'F': 0}\n",
    "        numerical_grades = [grade_points[grade] for grade in self.grades]\n",
    "        \n",
    "        average = sum(numerical_grades) / len(numerical_grades)\n",
    "        mean = statistics.mean(numerical_grades)\n",
    "        median = statistics.median(numerical_grades)\n",
    "        mode = statistics.mode(numerical_grades)\n",
    "\n",
    "        print(f\"Average: {average}\")\n",
    "        print(f\"Mean: {mean}\")\n",
    "        print(f\"Median: {median}\")\n",
    "        print(f\"Mode: {mode}\")\n",
    "\n",
    "# Create student objects and test the method\n",
    "c1 = Student(\"Gam\", \"Uba24PH066\")\n",
    "c1.displayname()\n",
    "c1.addGrade(\"A\")\n",
    "c1.addGrade(\"B\")\n",
    "c1.addGrade(\"A\")\n",
    "c1.addGrade(\"C\")\n",
    "c1.displayGrades()\n",
    "c1.calculateStatistics()\n",
    "\n",
    "c2 = Student(\"Geofrey\", \"Uba24PH067\")\n",
    "c2.displayname()\n",
    "c2.addGrade(\"B\")\n",
    "c2.addGrade(\"C\")\n",
    "c2.addGrade(\"C\")\n",
    "c2.addGrade(\"B\")\n",
    "c2.displayGrades()\n",
    "c2.calculateStatistics()\n",
    "\n",
    "\n",
    " \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31da73ee-8394-44c3-8ebd-f98bba6765eb",
   "metadata": {},
   "source": [
    "## Exercise 3:\n",
    "Make short Notes on Regular Expressions:\n",
    "\n",
    "\n",
    "\n",
    "A regular expression(regex) is a pattern used to match character combinations in strings. It is a powerfull tool for searching,validating and extracting data from text.\n",
    "1.pattern:A regex pattern is a string of characters that defines a search criteria.\n",
    "2.Match: A match is the string of characters that satisfies the pattern.\n",
    "- .(matches any single character).\n",
    "- ^(matches the start of a string).\n",
    "- $(matches the end of a string).\n",
    "- |(matches either the expression on the left or on the right).\n",
    "- *(matches 0 or more occurance of the preceeding character).\n",
    "- +(matches 1 or more occurences of the preceeding characters).\n",
    "- ?(matches 0 or 1 occurences of the preceeding characters).\n",
    "- {n}(matches exactly n occurences of the precceding characters).\n",
    "- {n,}(matches n or more occurrences of the preceeding characters).\n",
    "- {m,n}(matches between m and n occurrences of the preceeding characters).\n",
    "\n",
    "CHARACTER CLASS\n",
    "[abc] matches any character inside the bracket.\n",
    "[^abc] matches any character not inside the brackets.\n",
    "[a-zA-Z]matches any character in the range a- z or A-Z.\n",
    "\\d matches any digits.\n",
    "\\D matches any non digits.\n",
    "\\w matches ny alpha numeric character or underscore.\n",
    "\n",
    "( and ) Defines groups and captures\n",
    "\\1,\\2,.....refers to the captured group.\n",
    "\n",
    "BASIC FUNCTIONS\n",
    "re.search(pattern,string): searches for the first occurrence of the pattern in string.\n",
    "re.match(pattern,string): searches for the pattern at the begining of the string.\n",
    "re.findall(pattern,string): Finds all occurrence of the pattern in the string.\n",
    "re.split(pattern,string): Split the string in to substrings based on the pattern.\n",
    "re.sub(pattern,reol,string): replaces occurences of the pattern in the string with the replacement string.\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
